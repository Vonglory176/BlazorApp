@page "/learn-blazor/bind-prop"
@rendermode InteractiveServer
@* @using Models; --> This can be removed because it was instead added to "_Imports.razor" for application wide use! *@

<PageTitle>BindProp</PageTitle>

@*
"value" is a one-way binding that only sets the initial value of the input element. Changes to the input WON'T update
the Product.Price property.
"bind" creates a two-way binding between the input element and the property. Changes to the input WILL update the
Product.Price property.
*@

@* <h2 class="mb-4">Product - Data Binding</h2> *@
<div class="row mb-4">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product - Playground</h3>
        <hr />

        Name : <input type="text" @bind="@Product.Name" @bind:event="oninput" />
        
        <br />
        <br />

        IsActive : <input type="checkbox" @bind="@Product.IsActive" @bind:event="oninput" /> 
        
        <br />
        <br />

        Value Input-Price : <input type="number" value="@Product.Price" /> <br />
        Bind Input-Price : <input type="number" @bind="@Product.Price" @bind:event="oninput" /> 
        
        <br /> 
        <br />

        Product Properties
        <select @bind=selectedProp>
            @foreach (var prop in Product.ProductProperties)
            {
                <option value="@prop.Key">@prop.Key</option>
            }
        </select>

    </div>
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product - Summary</h3>
        <hr />

        Name : @Product.Name 

        <br />
        <br />

        IsActive: @Product.IsActive  <br />
        This Product is @(Product.IsActive ? "Active" : "Inactive")
        @* This Product is: @if(Product.IsActive) { <span>Active</span> } else { <span>Inactive</span> }; // Very Neat !!! *@
        
        <br />
        <br />

        Price : @Product.Price

         <br />
         <br />

        Selected Prop: @selectedProp <br />
        @if (!string.IsNullOrEmpty(selectedProp))
        {
            <span>Selected Value: @Product.ProductProperties.FirstOrDefault(u=>u.Key==selectedProp).Value</span> // This sets a default value if one isn't selected
        }
    </div>
</div>

<div class="col-12 p-4">
    <h2 class="text-success">Product Table</h2>

    <table class="table table-striped">
        <thead>
            <tr>
                <td>Product Name</td>
                <td>Price</td>
                <td>Is Active</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in ProductList) 
            {
                <tr>
                    <td><input type="text" @bind="@prod.Name" @bind:event="oninput" /></td>
                    <td><input type="number" @bind="@prod.Price" @bind:event="oninput" /></td>
                    <td><input type="checkbox" @bind="@prod.IsActive" @bind:event="oninput" /></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="col-12 p-4">
    <h2>Product Summary</h2>
    <div>
        @foreach (var prod in ProductList)
        {
            <p>
                <span>@prod.Name</span>
                <span>@prod.Price</span>
                <span>@(prod.IsActive ? "Active" : "InActive")</span>
            </p>
        }
    </div>
</div>

@code {
    private string selectedProp = "";
    Product Product = new() // If not for the import, you could also use "Models.Product", "Models.Product_Prop", etc.
    {
        Id = 1,
        Name = "Product 1",
        IsActive = true,
        Price = 100,
        ProductProperties = new List<Product_Prop>()
        {
            new Product_Prop{ Id = 1 , Key = "Color", Value = "Red" },
            new Product_Prop{ Id = 2 , Key = "Size", Value = "20oz" },
            new Product_Prop{ Id = 3 , Key = "Flavor", Value = "Rose" },
        }
    };

    List<Product> ProductList = new();
    protected override void OnInitialized()
    {
        ProductList.Add(new()
        {
            Id = 1,
            Name = "Midnight Blaze",
            IsActive = false,
            Price = 5.99,
            ProductProperties = new List<Product_Prop>()
            {
                new Product_Prop { Id = 1, Key = "Flavor", Value = "Rose"},
                new Product_Prop { Id = 2, Key = "Size", Value = "20oz"},
                new Product_Prop { Id = 3, Key = "Color", Value="Purple" }
            }
        });

        ProductList.Add(new()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            Price = 10.59,
            ProductProperties = new List<Product_Prop>()
            {
                new Product_Prop { Id = 1, Key = "Flavor", Value = "Lily" },
                new Product_Prop { Id = 2, Key = "Size", Value = "18oz" },
                new Product_Prop {Id = 3,Key = "Color",Value = "White"}
            }
        });
    }
}
